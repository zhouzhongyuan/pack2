/**
 * Created by bokeadmin on 11/13/15.
 */
'use strict';
var child = require('child_process');
var cheerio = require('cheerio');
var cordova = require('cordova');
var co = require('co');
var fs = require('fs-extra');
var _ = require('underscore');
function pack(packConfig){
    var o = new Object();
    o.build = function(){
        return co(function*(){
            yield o.preparePack();
/*            //yield o.emptyDir(o.svnDir);
            yield o.getSvn(o.baseSvn,o.svnDir, 'zhouzy','zhouzy');
            //yield o.emptyDir(o.projectDir);
            //yield o.getSvn(o.projectSvn, o.projectDir, o.projectSvnUser, o.projectSvnPassword);
            yield o.getSvn(o.projectSvn, o.projectDir, 'zhouzy','zhouzy');*/
            yield o.processCode();
            /*yield o.changelibConfigJSPath();*/
            process.chdir('cordova');
            //yield o.removePlatform();
            //yield o.addPlatform();
            //yield o.preparePlatform();
            yield o.removePlugin();
            yield o.removePlugin();
            yield o.addPlugin();
            if(o.appPlatform === 'android'){
                yield o.buildExtras(); //android
            }
/*            yield o.addKey();
            yield o.buildApp();
            yield o.releaseFile();*/
            //yield o.removePlatform();
            yield o.removePlugin();
            yield o.removePlugin();
            yield o.removePlugin();
           /* yield o.cleanPlatform();*/



            process.chdir('..');
            return o;
        })
    };
    o.id = packConfig.id;
    o.baseSvn = packConfig.baseSvn;
    o.projectSvn = packConfig.projectSvn;
    o.appName = packConfig.appName;
    o.appEnglish = packConfig.appEnglishName;
    o.appDescription = packConfig.appDescription;
    o.appIcon = packConfig.appIcon;
    o.appContent = packConfig.appContent;
    o.appPlugin = packConfig.appPlugin || packConfig['appPlugin[]'];
    o.projectSvnUser = packConfig.projectSvnUser;
    o.projectSvnPassword = packConfig.projectSvnPassword;
    o.appPlatform = packConfig.appPlatform;
    o.appNameSpace = packConfig.appNameSpace;
    o.svnDir = 'cordova/www';
    o.baseSvnUser = 'zhouzy';
    o.baseSvnPassword = 'zhouzy';
    o.configXML = 'cordova/config.xml';
    o.projectDirName = function(){
        var projectDirName = o.projectSvn;
        if( projectDirName.split('/').slice(-1).toString().length < 1 ){
            projectDirName = projectDirName.split('/').slice(-2,-1);
        }else{
            projectDirName = projectDirName.split('/').slice(-1);
        }
        projectDirName = projectDirName.toString();
        return projectDirName;
    };
    o.projectPath = o.svnDir + '/js/lib/';
    o.projectDir = o.svnDir + '/js/lib/' + o.projectDirName();
    o.libConfigJSPath = o.svnDir + '/js/lib/config/config.js';
    o.platform = packConfig.appPlatform;
    o.appBuildType = packConfig.appBuildType;
    o.appPackageName = packConfig.appPackageName;
    o.appVersion = packConfig.appVersion;
    o.appIosMp = packConfig.appIosMp;

    o.apkLink = packConfig.apkDownloadLink;
    o.ipaLink = packConfig.ipaLink;
    o.preparePack = function(){
      return new Promise(function(resolve,reject){
          var currentDir = process.cwd().split('/');
          if(currentDir[currentDir.length - 1].toString() == 'cordova'){
              process.chdir('..');
              resolve('Change dir to cordova\'s parent dir.');
          }
          resolve('The current dir is right.\nNo need to change.');
      });
    }
    o.getSvn = function(url,dir,username,password) {
        return new Promise(function (resolve, reject) {
            console.log(process.cwd());
            console.log(dir);
            console.log(fs.existsSync(o.projectDir));
            var Client = require('svn-spawn');
            var client = new Client({
                cwd: dir,
                username: username,
                password: password
            });
            client.checkout(url,function(err, data) {
                if(err){
                    reject(new Error(err))
                }
                resolve(data);
            });

        });
    };
    //Change cordova/www/js/lib/config/config.js
    o.changelibConfigJSPath = function(){
        return new Promise(function (resolve, reject) {
            var configJs = 'define(["lib/' + o.projectDirName() + '/config"],function(config) {\n' +
                '    return config;\n' +
                '});';
            fs.writeFile(o.libConfigJSPath, configJs,function(err, data) {
                if(err){
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };
    o.createCordova = function (){
        return new Promise(function (resolve, reject) {
            cordova.create("cordova", o.namespace, o.appName, function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };

    o.processCode = function(){
        return new Promise(function (resolve, reject) {
            console.log(process.cwd());
            try {
                var $ = cheerio.load(fs.readFileSync(o.configXML), {
                    decodeEntities: false,
                    xmlMode: true
                });
                if ($) {
                    changeConfigXML('widget', o.appVersion, 'version');
                    changeConfigXML('widget', o.appPackageName, 'id');
                    changeConfigXML('name', o.appName);
                    changeConfigXML('description', o.appDescription);
                    changeConfigXML('icon', o.appIcon, 'src');
                    changeConfigXML('content', o.appContent, 'src');
                    fs.writeFile(o.configXML,$.xml(),function(err,data){
                        if (err) {
                            reject(new Error(err))
                        }

                        resolve(data);
                    });
                }
            }catch(ex){
                reject(ex)
            }
            function changeConfigXML(item,value,attr) {
                switch (item) {
                    case 'content':
                        $(item).attr(attr, value);
                        break;
                    case 'widget':
                        $('widget').attr(attr, value);
                        break;
                    case 'description':
                        $(item).text(value);
                        break;
                    case 'name':
                        $(item).text(value);
                        break;
                    case 'icon':
                        if(value){
                            if ($('icon').length !== 0) {
                                $(item).attr(attr, value);
                            } else {
                                var icon = '    <icon src="' + value + '" />\n';
                                $('widget').append(icon);
                            }
                        }
                        break;
                };
            };

        });
    };
    o.cleanPlatform = function (platform){
        return new Promise(function (resolve, reject) {
            var platform = platform || o.appPlatform ;
            console.log('clean platform ',platform,' begin');
            cordova.clean(platform,{'verbose': true},function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                console.log('clean platform ',platform,' success');
                resolve(data);
            });
        });
    };
    o.addPlatform = function (platform){
        return new Promise(function (resolve, reject) {
            console.log(process.cwd());
            var platform = platform || o.appPlatform ;
            console.log('add platform:', platform,'begin');
            cordova.platform('add', platform,{'verbose': true},function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                console.log('add platform',platform,'success');
                resolve(data);
            });
        });
    };
    o.removePlatform = function(platform){
        return new Promise(function (resolve, reject) {
            var platform = platform || o.appPlatform ;
            cordova.platform('remove', platform,function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };
    o.preparePlatform = function(){
        return new Promise(function (resolve, reject) {
            console.log(process.cwd());
            console.log('prepare platform begin');
            cordova.prepare({platforms: [o.platform], options: {} }, function (err, data) {
                if (err) {
                    reject(new Error(err))
                }

                resolve(data);
            });
        });
    };
    o.addPlugin = function(){
        return co(function *() {
            console.log('add plugin begin');
            var plugin = o.appPlugin;
            console.log(plugin);
            if( typeof plugin !='undefined' && plugin.length != 0){
                plugin = plugin.split(',');
                //分类
                var pluginWithVariable = [];
                var pluginWithoutVariable = [];
                for(var i=0;i<plugin.length;i++){
                    if(plugin[i].indexOf('?') === -1){
                        pluginWithoutVariable.push(plugin[i].toString());
                    }else{
                        pluginWithVariable.push(plugin[i].toString());
                    }
                }
                console.log(pluginWithoutVariable);
                console.log(pluginWithVariable);

                if(pluginWithVariable.length !== 0) {
                    for(var i=0;i<pluginWithVariable.length;i++){
                        //拆分plugin 和 variable
                        var plugin = pluginWithVariable[i].toString();
                        var pluginName = plugin.split('?')[0].toString();
                        var pluginVariable = plugin.split('?')[1];
                        //toJson
                        var variable = {};
                        variable.cli_variables = {};
                        _.each(pluginVariable.split('&'),function(v){
                            variable.cli_variables[v.split('=')[0]] = v.split('=')[1];
                        })
                        console.log('pluginName ready:',pluginName);
                        console.log('variable ready:',variable);
                        console.log(typeof pluginName);
                        console.log(typeof variable);
                        yield o.addPluginReal(pluginName,variable);
                    }
                }
                //添加
                if(pluginWithoutVariable.length !== 0){
                    yield o.addPluginReal(pluginWithoutVariable);
                }
            }
        });
    };
    o.addPluginReal = function(plugin,variable){
        console.log('begin to add plugin');
        console.log(plugin,variable);
        return new Promise(function (resolve, reject) {
            cordova.plugin('add', plugin, variable,function (err, data) {
                if (err) {
                    console.error(err.stack)
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };
    o.removePlugin = function(){
        return new Promise(function (resolve, reject) {
            cordova.plugin('ls',function(err,data){
                console.log(data);
                if( data.length != 0){
                    cordova.plugin('remove', data,function (err, data) {
                        if (err) {
                            reject(new Error(err))
                        }
                        resolve(data);
                    });
                }else {
                    resolve('no plugin');
                }

            })
        });
    };

    o.buildExtras = function(){
        return new Promise(function (resolve, reject) {
            console.log('add build extras begin');
            var lintOptions =
                "android {\n" +
                "    lintOptions {\n" +
                "        disable 'MissingTranslation'\n" +
                "        disable 'ExtraTranslation'\n" +
                "    }\n" +
                "}";
            fs.writeFile('platforms/android/build-extras.gradle', lintOptions, function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });

    };
    o.addKey = function(){
        return new Promise(function (resolve, reject) {
            var json = {
                "android": {
                    "release": {
                        "keystore": "../android.keystore",
                        "storePassword": "bokesoft",
                        "alias": "android",
                        "password" : "bokesoft",
                        "keystoreType": ""
                    },
                    "debug": {
                        "keystore": "../android.keystore",
                        "storePassword": "bokesoft",
                        "alias": "android",
                        "password" : "bokesoft",
                        "keystoreType": ""
                    }
                },
                "ios": {
                    "debug": {
                        "codeSignIdentitiy": "iPhone Development",
                        "provisioningProfile": "2538e3a2-e134-4968-9d67-6f3220027cc4"

                    },
                    "release": {
                        "codeSignIdentitiy": "iPhone Distribution",
                        "provisioningProfile": "2538e3a2-e134-4968-9d67-6f3220027cc4"


                    }
                }
            };
            //修改mp
            json.ios.debug.provisioningProfile = o.appIosMp;
            json.ios.release.provisioningProfile = o.appIosMp;
            var json = JSON.stringify(json);
            fs.writeFile('build.json', json, function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    }
    o.buildApp = function(){
        return new Promise(function (resolve, reject) {
            console.log('build',o.platform,'begin')
            var buildType = o.appBuildType == 'release'?true:false;
            cordova.build({platforms:[o.platform],options:{"release":buildType,"silent":false,"device":true}},function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                console.log('build',o.platform,'success')
                resolve(data);
            });
        });
    };
    o.releaseFile = function(){
        return new Promise(function (resolve, reject) {
            var src;
            var dest;
            switch (o.platform){
                case 'android':
                    src = ['platforms/android/build/outputs/apk/android-',o.appBuildType,'.apk'].join('');
                    dest = o.apkLink;
                    break;
                case 'ios':
                    src = ['platforms/ios/build/device/',o.appName,'.ipa'].join('');
                    dest = o.ipaLink;
                    break;
                default:
                    reject('The platform is not support.') ;
            };
            console.log(o.targetPath);
            fs.copy(src, dest,function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };
    o.emptyDir = function(dir){
        return new Promise(function (resolve, reject) {

            fs.emptydir(dir,function (err, data) {
                if (err) {
                    reject(new Error(err))
                }
                resolve(data);
            });
        });
    };
    return o;
};

module.exports = pack;
//"provisioningProfile": "2ba4e0f6-b91f-4b15-a3af-88b0d075660b" //carceo
//"provisioningProfile": "2538e3a2-e134-4968-9d67-6f3220027cc4" //tyh
//"provisioningProfile": "136cea00-36c6-49e4-9d6d-bd4032dfe448" //gzw



